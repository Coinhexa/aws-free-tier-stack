Description: AWS Free Tier Stack helps you set up all the basics you need to safely start using AWS. See https://github.com/yannickvr/aws-free-tier-stack for more information.
Transform: 'AWS::LanguageExtensions'
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Email:
    Type: CommaDelimitedList
    Description: Email addresses to receive budget alerts
    Default: 'email@example.com'
  DailyBudgetAmount:
    Type: Number
    Description: Daily Budget amount to receive alerts for
    Default: 1

Resources:
  #An SNS Topic allows services to send notifications to a subscribed endpoint
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: !Sub "${AWS::StackName}-topic"

  #Here we configure an AWS Event that alerts us when the root user is used
  RootUserLoginEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events rule for monitoring root AWS Console Sign In activity
      EventPattern:
        detail-type:
        - AWS Console Sign In via CloudTrail
        detail:
          userIdentity:
            type:
            - Root
      Name:
        Fn::Sub: "${AWS::StackName}-RootActivityRule"
      State: ENABLED
      Targets:
      - Arn:
          Ref: SNSTopic
        Id: SNSTopic

  #Here we configure which AWS services can publish to the SNS Topic
  SNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowEventsToPublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:events::${AWS::AccountId}:*'
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: AllowBudgetsToPublish
            Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:budgets::${AWS::AccountId}:*'
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'
      Topics:
        - !Ref SNSTopic

  #This is a bit more advanced CloudFormation which is used to subscribe each email address entered in the parameter to the SNS Topic
  Fn::ForEach::Topics:
    - Subscriber
    - !Ref Email
    - "SNSSubScription&{Subscriber}":
        Type: AWS::SNS::Subscription
        Properties:         
          Protocol: email
          TopicArn: !Ref SNSTopic
          Endpoint: !Ref Subscriber

  #This is the Budget which will send alerts to the SNS Topic
  Budget:
    Type: 'AWS::Budgets::Budget'
    Properties:
      Budget:
        BudgetName: aws-free-tier-budget
        BudgetLimit:
          Amount: !Ref DailyBudgetAmount
          Unit: USD
        TimeUnit: DAILY
        BudgetType: COST
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 100
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSTopic

  #This lambda function written in python does all daily checks and sends alerts to the SNS Topic
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref SNSTopic
              - Effect: Allow
                Action:
                  - 'iam:ListAccessKeys' #Used to get IAM user access keys
                  - 'iam:GetAccountSummary' #Used to get account access keys and MFA status
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          # import logging

          # logger = logging.getLogger()
          # logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              def send_sns_message(message):
                  sns = boto3.client('sns')
                  sns.publish(
                      TopicArn=os.environ['SNSTopic'],
                      Message=message
                  )

              def check_root():
                  iam = boto3.client('iam')
                  response = iam.get_account_summary()
                  if response['SummaryMap']['AccountMFAEnabled'] == 0:
                      print('Root user does not have MFA set!')
                      send_sns_message('Root user does not have MFA set!')
                  else:
                      print('Root user has MFA set!')
                  if response['SummaryMap']['AccountAccessKeysPresent'] > 0:
                      print('Root user has access keys present!')
                      send_sns_message('Root user has access keys present!')
                  else:
                      print('Root user does not have access keys present!')

              check_root()

      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SNSTopic: !Ref SNSTopic
      MemorySize: 128

  EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Run the lambda function every 24 hours'
      ScheduleExpression: 'rate(24 hours)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 'RunLambdaFunction'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventRule.Arn
  