Description: AWS Free Tier Stack helps you set up all the basics you need to safely start using AWS. See https://github.com/yannickvr/aws-free-tier-stack for more information.
Transform: "AWS::LanguageExtensions"
AWSTemplateFormatVersion: 2010-09-09

Metadata:
  Source:
    Description: "https://github.com/yannickvr/aws-free-tier-stack"

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Email Configuration"
        Parameters:
          - Email
      - Label:
          default: "Budget Configuration"
        Parameters:
          - DailyBudgetAmount
    ParameterLabels:
      Email:
        default: "Email addresses to receive budget alerts. Comma separated, e.g. 'one@example.com,two@example.com'"
      DailyBudgetAmount:
        default: "Daily Budget amount to receive alerts for, in dollars"

Parameters:
  Email:
    Type: CommaDelimitedList
    Description: "Email addresses:"
    Default: "email@example.com"
  DailyBudgetAmount:
    Type: Number
    Description: "Daily Budget:"
    Default: 1

#This condition checks if the stack is being deployed in us-east-1
Conditions:
  NotInUsEast1:
    Fn::Not:
      - Fn::Equals:
          - !Ref "AWS::Region"
          - "us-east-1"

Resources:
  #This will fail on purpose to check if this stack is being deployed in us-east-1
  DeploymentFailDueToWrongRegion:
    Type: "AWS::CloudFormation::CustomResource"
    Condition: NotInUsEast1
    Properties: {}

  #An SNS Topic allows services to send notifications to a subscribed endpoint
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "${AWS::StackName}-topic"

  #Here we configure an AWS Event that alerts us when the root user is used
  RootUserLoginEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events rule for monitoring root AWS Console Sign In activity
      EventPattern:
        detail-type:
          - AWS Console Sign In via CloudTrail
        detail:
          userIdentity:
            type:
              - Root
      Name:
        Fn::Sub: "${AWS::StackName}-RootActivityRule"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "RunLambdaFunction"

  #Here we configure which AWS services can publish to the SNS Topic
  SNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowEventsToPublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                "aws:SourceArn": !GetAtt RootUserLoginEventRule.Arn
              StringEquals:
                "aws:SourceAccount": !Ref "AWS::AccountId"
          - Sid: AllowBudgetsToPublish
            Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action: "sns:Publish"
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:${AWS::Partition}:budgets::${AWS::AccountId}:*"
              StringEquals:
                "aws:SourceAccount": !Ref "AWS::AccountId"
      Topics:
        - !Ref SNSTopic

  #This is a bit more advanced CloudFormation which is used to subscribe each email address entered in the parameter to the SNS Topic
  Fn::ForEach::Topics:
    - Subscriber
    - !Ref Email
    - "SNSSubScription&{Subscriber}":
        Type: AWS::SNS::Subscription
        Properties:
          Protocol: email
          TopicArn: !Ref SNSTopic
          Endpoint: !Ref Subscriber

  #This is the Budget which will send alerts to the SNS Topic
  Budget:
    Type: "AWS::Budgets::Budget"
    Properties:
      Budget:
        BudgetName: aws-free-tier-budget
        BudgetLimit:
          Amount: !Ref DailyBudgetAmount
          Unit: USD
        TimeUnit: DAILY
        BudgetType: COST
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 100
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSTopic

#This is the IAM Role that the lambda function will use
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref SNSTopic
              - Effect: Allow
                Action:
                  - "iam:ListAccessKeys" #Used to get IAM user access keys
                  - "iam:GetAccountSummary" #Used to get account access keys and MFA status
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

#This is the log group that stores the logs of the lambda function
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 30

#This is the lambda function that does all the checks and sends alerts
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              # List to store messages
              messages = []

              access_keys_message = """Root user has access keys present, visit this URL to learn how to solve this: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user_manage_delete-key.html"""
              mfa_message = """Root user does not have MFA configured, visit this URL to learn how to solve this: https://docs.aws.amazon.com/IAM/latest/UserGuide/enable-virt-mfa-for-root.html"""

              def send_sns_message(message):
                  # Append the message to the list
                  messages.append(message)

              def check_root():
                  iam = boto3.client('iam')
                  response = iam.get_account_summary()
                  if response['SummaryMap']['AccountMFAEnabled'] == 0:
                      print('Root user does not have MFA set!')
                      send_sns_message(mfa_message)
                  else:
                      print('Root user has MFA set!')
                  if response['SummaryMap']['AccountAccessKeysPresent'] > 0:
                      print('Root user has access keys present!')
                      send_sns_message(access_keys_message)
                  else:
                      print('Root user does not have access keys present!')

              # Call the function to check root user
              if "detail-type" in event and event["detail-type"] == "Scheduled Event":
                  check_root()
              elif "detail-type" in event and event["detail-type"] == "AWS Console Sign In via CloudTrail":
                  send_sns_message(f"Root user logged in to the AWS Console from {event['detail']['sourceIPAddress']}. If this was not you, reset your password immediately and enable MFA. Visit https://docs.aws.amazon.com/IAM/latest/UserGuide/root-user-best-practices.html for more information.")

              # If there are messages in the list, send a single message with all accumulated messages
              if messages:
                  # Create an SNS client
                  sns = boto3.client('sns')
                  # Join all messages into a single string separated by newlines
                  message = '\n'.join(messages)
                  # Send the message
                  sns.publish(
                      TopicArn=os.environ['SNSTopic'],
                      Message=message,
                      Subject='AWS Free Tier Stack Alert'
                  )

      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SNSTopic: !Ref SNSTopic
      MemorySize: 128

#AWS Events, or eventbridge, is used to schedule the lambda function to run daily
  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Run all checks every 24 hours."
      ScheduleExpression: "cron(0 12 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "RunLambdaFunction"

#This allows the lambda function to be invoked by the scheduled event rule
  LambdaInvokePermissionScheduledEvent:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule.Arn

#This allows the lambda function to be invoked by the root user login event rule
  LambdaInvokePermissionRootLogin:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RootUserLoginEventRule.Arn

#This is the S3 bucket that will store the CloudTrail logs
  CloudTrailBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::AccountId}-cloudtrail-bucket"
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldObjects
            Status: Enabled
            ExpirationInDays: 365

#This is the policy that allows CloudTrail to write logs to the S3 bucket
  CloudTrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:GetBucketAcl"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${CloudTrailBucket}"
            Condition:
              StringEquals:
                "aws:SourceArn": !Sub arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/CloudTrail
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:PutObject"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${CloudTrailBucket}/*"
            Condition:
              StringEquals:
                "aws:SourceArn": !Sub arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/CloudTrail
                "s3:x-amz-acl": "bucket-owner-full-control"

#This is the CloudTrail configuration
  CloudTrail:
    DependsOn: CloudTrailBucketPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      TrailName: CloudTrail
      IsMultiRegionTrail: true
      S3BucketName: !Ref CloudTrailBucket
      IncludeGlobalServiceEvents: true
      IsLogging: true
